// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MvcLibrary.Data;

namespace MvcLibrary.Migrations
{
    [DbContext(typeof(MvcLibraryContext))]
    [Migration("20201122103427_ImgUrl")]
    partial class ImgUrl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("MvcLibrary.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdPublishingCompany")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPublishingCompany");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("MvcLibrary.Models.BookGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.Property<int>("IdGenre")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdBook");

                    b.HasIndex("IdGenre");

                    b.ToTable("BookGenres");
                });

            modelBuilder.Entity("MvcLibrary.Models.BorrowDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.Property<int>("IdBorrowing")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdBook");

                    b.HasIndex("IdBorrowing");

                    b.ToTable("BorrowDetails");
                });

            modelBuilder.Entity("MvcLibrary.Models.Borrower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Respect")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Borrowers");
                });

            modelBuilder.Entity("MvcLibrary.Models.Borrowing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdBorrower")
                        .HasColumnType("int");

                    b.Property<int>("IdLibrarian")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdBorrower");

                    b.HasIndex("IdLibrarian");

                    b.ToTable("Borrowings");
                });

            modelBuilder.Entity("MvcLibrary.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MvcLibrary.Models.Librarian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Librarians");
                });

            modelBuilder.Entity("MvcLibrary.Models.PublishingCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PublishingCompanies");
                });

            modelBuilder.Entity("MvcLibrary.Models.Book", b =>
                {
                    b.HasOne("MvcLibrary.Models.PublishingCompany", "PublishingCompany")
                        .WithMany("Books")
                        .HasForeignKey("IdPublishingCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublishingCompany");
                });

            modelBuilder.Entity("MvcLibrary.Models.BookGenre", b =>
                {
                    b.HasOne("MvcLibrary.Models.Book", "Book")
                        .WithMany("BookGenre")
                        .HasForeignKey("IdBook")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcLibrary.Models.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("IdGenre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MvcLibrary.Models.BorrowDetail", b =>
                {
                    b.HasOne("MvcLibrary.Models.Book", "Book")
                        .WithMany("BorrowDetails")
                        .HasForeignKey("IdBook")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcLibrary.Models.Borrowing", "Borrowing")
                        .WithMany("BorrowDetails")
                        .HasForeignKey("IdBorrowing")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Borrowing");
                });

            modelBuilder.Entity("MvcLibrary.Models.Borrowing", b =>
                {
                    b.HasOne("MvcLibrary.Models.Borrower", "Borrower")
                        .WithMany("Borrowings")
                        .HasForeignKey("IdBorrower")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcLibrary.Models.Librarian", "Librarian")
                        .WithMany("Borrowings")
                        .HasForeignKey("IdLibrarian")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrower");

                    b.Navigation("Librarian");
                });

            modelBuilder.Entity("MvcLibrary.Models.Book", b =>
                {
                    b.Navigation("BookGenre");

                    b.Navigation("BorrowDetails");
                });

            modelBuilder.Entity("MvcLibrary.Models.Borrower", b =>
                {
                    b.Navigation("Borrowings");
                });

            modelBuilder.Entity("MvcLibrary.Models.Borrowing", b =>
                {
                    b.Navigation("BorrowDetails");
                });

            modelBuilder.Entity("MvcLibrary.Models.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("MvcLibrary.Models.Librarian", b =>
                {
                    b.Navigation("Borrowings");
                });

            modelBuilder.Entity("MvcLibrary.Models.PublishingCompany", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
